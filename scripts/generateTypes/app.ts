import { promises as fs } from 'node:fs'
import path from 'node:path'
import { format } from './../helpers'
import * as globby from 'globby'
import FeatureExtractor from './../../src/Extractor/FeatureExtractor'

async function main() {
  const extractor = new FeatureExtractor()

  const searchPath = path.resolve(
    __dirname,
    './../../src/runtime/components/Edit/Features',
  )

  const files = await globby.globby(searchPath + '/*/index.vue')

  await extractor.addFiles(files)

  const features = extractor.getFeatures()

  const settings: string[] = []

  features.forEach((feature) => {
    if (feature.definition.settings) {
      Object.entries(feature.definition.settings)
        .sort((a, b) => a[0].localeCompare(b[0]))
        .forEach(([key, setting]) => {
          const settingsKey = `feature:${feature.id}:${key}`
          settings.push(`// ${setting.label}`)
          if (setting.type === 'radios') {
            const type = Object.keys(setting.options)
              .map((v) => `'${v}'`)
              .join(' | ')
            settings.push(
              `'${settingsKey}'?: { disable?: boolean, default?: ${type} }`,
            )
          } else if (setting.type === 'checkbox') {
            settings.push(
              `'${settingsKey}'?: { disable?: boolean, default?: boolean }`,
            )
          } else if (setting.type === 'slider') {
            settings.push(
              `'${settingsKey}'?: { disable?: boolean, default?: number }`,
            )
          } else {
            settings.push(`'${settingsKey}'?: { disable?: boolean }`)
          }
        })
    }
  })

  const typeFile = `
  // This file is generated by ./scripts/generateTypes/app.ts

  export type ModuleOptionsSettings = {
    ${settings.join('\n')}
  }
  `

  const formatted = await format(typeFile, 'typescript')

  const dest = path.resolve(
    __dirname,
    './../../src/runtime/types/generatedModuleTypes.ts',
  )
  await fs.writeFile(dest, formatted)
}

main()

export default {}
